
MainCodeMedTechEmbedded.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000266  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aac  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f3  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003cc  00000000  00000000  00001643  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001a10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b7  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000325  00000000  00000000  00001f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000022b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  8e:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ADCsingleRead>:

int ADCsingleRead(uint8_t adcPort) //adcPort argument takes an integer from 0-5 that will specify the ADC to use. Easier than hard coding the port so that in the future, we can call the function :)
{
	int returnValue;
	//Reset Registers
	ADMUX = 0b00000000;
  96:	ac e7       	ldi	r26, 0x7C	; 124
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	1c 92       	st	X, r1
	ADCSRA = 0b00000000;
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1
	ADCSRB = 0b00000000;
  a2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
	
	ADMUX = adcPort;
  a6:	8c 93       	st	X, r24
	ADMUX |= (1 << REFS0) | (0 << ADLAR); //AVcc internal reference, left justify ADLAR. Plan is to output ADCH for now since this is a test
  a8:	8c 91       	ld	r24, X
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0);
  ae:	80 81       	ld	r24, Z
  b0:	83 68       	ori	r24, 0x83	; 131
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //Fire the cannon... I mean ADC
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
	
	while(isBitSet(ADCSRA, ADSC)) //stalls the code while the ADC is initalizing/running
  ba:	80 81       	ld	r24, Z
  bc:	86 fd       	sbrc	r24, 6
  be:	fd cf       	rjmp	.-6      	; 0xba <ADCsingleRead+0x24>
	{}
		
	//the fake values were put in to avoid issues with maipulating ADCH and ADCL
	unsigned int fakeADCL = ADCL;
  c0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	unsigned int fakeADCH = ADCH;	
  c4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	returnValue = (fakeADCH << 8) + fakeADCL;
	return returnValue;
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	98 2f       	mov	r25, r24
  cc:	88 27       	eor	r24, r24
}
  ce:	82 0f       	add	r24, r18
  d0:	91 1d       	adc	r25, r1
  d2:	08 95       	ret

000000d4 <USART_TransmitChar>:


void USART_TransmitChar(unsigned char data)
{
	while (isBitClear(UCSR0A, UDRE0)) //If UDRE0 0 bit is set to 1, the transmitter is ready to transmit again.
  d4:	e0 ec       	ldi	r30, 0xC0	; 192
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	90 81       	ld	r25, Z
  da:	95 ff       	sbrs	r25, 5
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <USART_TransmitChar+0x4>
	{}
	UDR0 = data;
  de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  e2:	08 95       	ret

000000e4 <UART_putString>:
}

void UART_putString(char* stringA)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
	while(*stringA != 0x00)
  ea:	88 81       	ld	r24, Y
  ec:	88 23       	and	r24, r24
  ee:	31 f0       	breq	.+12     	; 0xfc <UART_putString+0x18>
  f0:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TransmitChar(*stringA);
  f2:	0e 94 6a 00 	call	0xd4	; 0xd4 <USART_TransmitChar>
	UDR0 = data;
}

void UART_putString(char* stringA)
{
	while(*stringA != 0x00)
  f6:	89 91       	ld	r24, Y+
  f8:	81 11       	cpse	r24, r1
  fa:	fb cf       	rjmp	.-10     	; 0xf2 <UART_putString+0xe>
	{
		USART_TransmitChar(*stringA);
		stringA++;
	}
}
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <UART_init>:


void UART_init(uint16_t ubrr) //takes in baud rate number
{
	// set baudrate in UBRR
	UBRR0L = (uint8_t)(ubrr & 0xFF); //gets low bits for baudrate
 102:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UBRR0H = (uint8_t)(ubrr >> 8); //gets high bits for baudrate
 106:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>

	UCSR0C = (1 << USBS0)|(3 << UCSZ00); //Set frame format: 8data, 2stop bit
 10a:	8e e0       	ldi	r24, 0x0E	; 14
 10c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>

	// enable the transmitter and receiver
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 110:	e1 ec       	ldi	r30, 0xC1	; 193
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 61       	ori	r24, 0x18	; 24
 118:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	2f e3       	ldi	r18, 0x3F	; 63
 11c:	82 e4       	ldi	r24, 0x42	; 66
 11e:	9f e0       	ldi	r25, 0x0F	; 15
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <UART_init+0x1e>
 128:	00 c0       	rjmp	.+0      	; 0x12a <UART_init+0x28>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <blinkLED>:
	_delay_ms(5000);
}

void blinkLED() //blinks the led. Ports are hardcoded.
{
	toggleBit(PORTB, PB0);
 12e:	95 b1       	in	r25, 0x05	; 5
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	98 27       	eor	r25, r24
 134:	95 b9       	out	0x05, r25	; 5
 136:	2f e9       	ldi	r18, 0x9F	; 159
 138:	36 e8       	ldi	r19, 0x86	; 134
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	30 40       	sbci	r19, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <blinkLED+0xe>
 144:	00 c0       	rjmp	.+0      	; 0x146 <blinkLED+0x18>
 146:	00 00       	nop
	_delay_ms(500);
	toggleBit(PORTB, PB0);
 148:	95 b1       	in	r25, 0x05	; 5
 14a:	89 27       	eor	r24, r25
 14c:	85 b9       	out	0x05, r24	; 5
 14e:	2f e9       	ldi	r18, 0x9F	; 159
 150:	36 e8       	ldi	r19, 0x86	; 134
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	21 50       	subi	r18, 0x01	; 1
 156:	30 40       	sbci	r19, 0x00	; 0
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <blinkLED+0x26>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <blinkLED+0x30>
 15e:	00 00       	nop
 160:	08 95       	ret

00000162 <init>:
}

void init()
{
	unsigned int ubrr = baudRate;
	UART_init(ubrr);
 162:	89 e1       	ldi	r24, 0x19	; 25
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 81 00 	call	0x102	; 0x102 <UART_init>
	DDRB |= 0b00000001;	
 16a:	20 9a       	sbi	0x04, 0	; 4
	blinkLED();
 16c:	0e 94 97 00 	call	0x12e	; 0x12e <blinkLED>
 170:	08 95       	ret

00000172 <transmitADCvalues>:
	
}

void transmitADCvalues(uint8_t ADCPort, char* stringToTransmit) //does the ADC conversion, then does the conversion and sends the raw ADC value and then the stringToTransmit.
{
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	2b 97       	sbiw	r28, 0x0b	; 11
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	de bf       	out	0x3e, r29	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	cd bf       	out	0x3d, r28	; 61
 18a:	8b 01       	movw	r16, r22
	int reading = ADCsingleRead(ADCPort);
 18c:	0e 94 4b 00 	call	0x96	; 0x96 <ADCsingleRead>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 190:	42 e0       	ldi	r20, 0x02	; 2
 192:	be 01       	movw	r22, r28
 194:	6f 5f       	subi	r22, 0xFF	; 255
 196:	7f 4f       	sbci	r23, 0xFF	; 255
 198:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__itoa_ncheck>
	char buffer[11];
	itoa(reading, buffer, 2);
	UART_putString(buffer);
 19c:	ce 01       	movw	r24, r28
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_putString>
	UART_putString(stringToTransmit);
 1a4:	c8 01       	movw	r24, r16
 1a6:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_putString>
	
}
 1aa:	2b 96       	adiw	r28, 0x0b	; 11
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	cd bf       	out	0x3d, r28	; 61
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	08 95       	ret

000001c0 <main>:

int main(void)
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	00 d0       	rcall	.+0      	; 0x1c6 <main+0x6>
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <main+0x8>
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <main+0xa>
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
	
	init();
 1ce:	0e 94 b1 00 	call	0x162	; 0x162 <init>
		char tempBuffer[11]; //Create a char buffer to write the reading too. Calculated by # of chars + 1 for null bit
		itoa(tempReading, tempBuffer, 2); //Converts the temp reading into a string that is stored in tempBuffer
		UART_putString(tempBuffer);
		UART_putString(tempString);
		*/
		char temperatureString[] = "TempC";
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	e0 e0       	ldi	r30, 0x00	; 0
 1d6:	f1 e0       	ldi	r31, 0x01	; 1
 1d8:	de 01       	movw	r26, r28
 1da:	11 96       	adiw	r26, 0x01	; 1
 1dc:	01 90       	ld	r0, Z+
 1de:	0d 92       	st	X+, r0
 1e0:	8a 95       	dec	r24
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0x1c>
		transmitADCvalues(5, temperatureString);
 1e4:	be 01       	movw	r22, r28
 1e6:	6f 5f       	subi	r22, 0xFF	; 255
 1e8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ea:	85 e0       	ldi	r24, 0x05	; 5
 1ec:	0e 94 b9 00 	call	0x172	; 0x172 <transmitADCvalues>
		
		
		USART_TransmitChar('\n'); //new line
 1f0:	8a e0       	ldi	r24, 0x0A	; 10
 1f2:	0e 94 6a 00 	call	0xd4	; 0xd4 <USART_TransmitChar>
 1f6:	ed cf       	rjmp	.-38     	; 0x1d2 <main+0x12>

000001f8 <__itoa_ncheck>:
 1f8:	bb 27       	eor	r27, r27
 1fa:	4a 30       	cpi	r20, 0x0A	; 10
 1fc:	31 f4       	brne	.+12     	; 0x20a <__itoa_ncheck+0x12>
 1fe:	99 23       	and	r25, r25
 200:	22 f4       	brpl	.+8      	; 0x20a <__itoa_ncheck+0x12>
 202:	bd e2       	ldi	r27, 0x2D	; 45
 204:	90 95       	com	r25
 206:	81 95       	neg	r24
 208:	9f 4f       	sbci	r25, 0xFF	; 255
 20a:	0c 94 08 01 	jmp	0x210	; 0x210 <__utoa_common>

0000020e <__utoa_ncheck>:
 20e:	bb 27       	eor	r27, r27

00000210 <__utoa_common>:
 210:	fb 01       	movw	r30, r22
 212:	55 27       	eor	r21, r21
 214:	aa 27       	eor	r26, r26
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	aa 1f       	adc	r26, r26
 21c:	a4 17       	cp	r26, r20
 21e:	10 f0       	brcs	.+4      	; 0x224 <__utoa_common+0x14>
 220:	a4 1b       	sub	r26, r20
 222:	83 95       	inc	r24
 224:	50 51       	subi	r21, 0x10	; 16
 226:	b9 f7       	brne	.-18     	; 0x216 <__utoa_common+0x6>
 228:	a0 5d       	subi	r26, 0xD0	; 208
 22a:	aa 33       	cpi	r26, 0x3A	; 58
 22c:	08 f0       	brcs	.+2      	; 0x230 <__utoa_common+0x20>
 22e:	a9 5d       	subi	r26, 0xD9	; 217
 230:	a1 93       	st	Z+, r26
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	79 f7       	brne	.-34     	; 0x214 <__utoa_common+0x4>
 236:	b1 11       	cpse	r27, r1
 238:	b1 93       	st	Z+, r27
 23a:	11 92       	st	Z+, r1
 23c:	cb 01       	movw	r24, r22
 23e:	0c 94 21 01 	jmp	0x242	; 0x242 <strrev>

00000242 <strrev>:
 242:	dc 01       	movw	r26, r24
 244:	fc 01       	movw	r30, r24
 246:	67 2f       	mov	r22, r23
 248:	71 91       	ld	r23, Z+
 24a:	77 23       	and	r23, r23
 24c:	e1 f7       	brne	.-8      	; 0x246 <strrev+0x4>
 24e:	32 97       	sbiw	r30, 0x02	; 2
 250:	04 c0       	rjmp	.+8      	; 0x25a <strrev+0x18>
 252:	7c 91       	ld	r23, X
 254:	6d 93       	st	X+, r22
 256:	70 83       	st	Z, r23
 258:	62 91       	ld	r22, -Z
 25a:	ae 17       	cp	r26, r30
 25c:	bf 07       	cpc	r27, r31
 25e:	c8 f3       	brcs	.-14     	; 0x252 <strrev+0x10>
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
