
MainCodeMedTechEmbedded.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000002a0  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d10  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000920  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000631  00000000  00000000  00001a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000020b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000057b  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000418  00000000  00000000  00002723  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002b3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <main>
  8e:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ADCsingleRead>:

int ADCsingleRead(uint8_t adcPort) //adcPort argument takes an integer from 0-5 that will specify the ADC to use. Easier than hard coding the port so that in the future, we can call the function :)
{
	int returnValue;
	//Reset Registers
	ADMUX = 0b00000000;
  96:	ac e7       	ldi	r26, 0x7C	; 124
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	1c 92       	st	X, r1
	ADCSRA = 0b00000000;
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1
	ADCSRB = 0b00000000;
  a2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
	
	ADMUX = adcPort;
  a6:	8c 93       	st	X, r24
	ADMUX |= (1 << REFS0) | (0 << ADLAR); //AVcc internal reference, left justify ADLAR. Plan is to output ADCH for now since this is a test
  a8:	8c 91       	ld	r24, X
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN) | (0 << ADPS2) | (1 << ADPS1) | (1<< ADPS0); //Enable the ADC, divide input clock by 8 for the ADC.
  ae:	80 81       	ld	r24, Z
  b0:	83 68       	ori	r24, 0x83	; 131
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //Fire the cannon... I mean ADC
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
	
	while(isBitSet(ADCSRA, ADSC)) //stalls the code while the ADC is initalizing/running
  ba:	80 81       	ld	r24, Z
  bc:	86 fd       	sbrc	r24, 6
  be:	fd cf       	rjmp	.-6      	; 0xba <ADCsingleRead+0x24>
	{}
	
	//the fake values were put in to avoid issues with manipulating ADCH and ADCL
	unsigned int fakeADCL = ADCL;
  c0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	unsigned int fakeADCH = ADCH;
  c4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	returnValue = (fakeADCH << 8) + fakeADCL;
	return returnValue;
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	98 2f       	mov	r25, r24
  cc:	88 27       	eor	r24, r24
  ce:	82 0f       	add	r24, r18
  d0:	91 1d       	adc	r25, r1
  d2:	08 95       	ret

000000d4 <UART_putChar>:
  d4:	e0 ec       	ldi	r30, 0xC0	; 192
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	90 81       	ld	r25, Z
  da:	95 ff       	sbrs	r25, 5
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <UART_putChar+0x4>
  de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  e2:	08 95       	ret

000000e4 <UART_putString>:
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
  ea:	88 81       	ld	r24, Y
  ec:	88 23       	and	r24, r24
  ee:	31 f0       	breq	.+12     	; 0xfc <UART_putString+0x18>
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_putChar>
  f6:	89 91       	ld	r24, Y+
  f8:	81 11       	cpse	r24, r1
  fa:	fb cf       	rjmp	.-10     	; 0xf2 <UART_putString+0xe>
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <UART_init>:
 102:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 106:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 10a:	8e e0       	ldi	r24, 0x0E	; 14
 10c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 110:	e1 ec       	ldi	r30, 0xC1	; 193
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	88 61       	ori	r24, 0x18	; 24
 118:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	2f eb       	ldi	r18, 0xBF	; 191
 11c:	87 e2       	ldi	r24, 0x27	; 39
 11e:	99 e0       	ldi	r25, 0x09	; 9
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <UART_init+0x1e>
 128:	00 c0       	rjmp	.+0      	; 0x12a <UART_init+0x28>
 12a:	00 00       	nop
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_putString>
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_putChar>
 13a:	81 e1       	ldi	r24, 0x11	; 17
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_putString>
 142:	8a e0       	ldi	r24, 0x0A	; 10
 144:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_putChar>
 148:	08 95       	ret

0000014a <UART_getChar>:
 14a:	e0 ec       	ldi	r30, 0xC0	; 192
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	88 23       	and	r24, r24
 152:	ec f7       	brge	.-6      	; 0x14e <UART_getChar+0x4>
 154:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 158:	08 95       	ret

0000015a <slaveSelector>:

void slaveSelector(uint8_t slaveSelectNumber) //Number between 0-7
{
	
	
	DDRB |= 0b00000111; //Ensure that the pins are set to output
 15a:	94 b1       	in	r25, 0x04	; 4
 15c:	97 60       	ori	r25, 0x07	; 7
 15e:	94 b9       	out	0x04, r25	; 4
	
	//Acquire the individual bits for the slaveSelect byte
	bool firstBit = isBitSet(slaveSelectNumber, 0);
	bool secondBit = isBitSet(slaveSelectNumber, 1);
 160:	81 fb       	bst	r24, 1
 162:	33 27       	eor	r19, r19
 164:	30 f9       	bld	r19, 0
	//bool thirdBit = isBitSet(slaveSelectNumber, 2);
	
	//Acquire the current state of the bits in PORT B
	bool pin1State = isBitSet(PORTB, PB0);
 166:	25 b1       	in	r18, 0x05	; 5
	bool pin2State = isBitSet(PORTB, PB1);
 168:	95 b1       	in	r25, 0x05	; 5
 16a:	96 95       	lsr	r25
 16c:	91 70       	andi	r25, 0x01	; 1
	UART_putChar('\n');
	*/
	
	
	//Compare and set
	if(!(firstBit == pin1State))
 16e:	81 70       	andi	r24, 0x01	; 1
 170:	21 70       	andi	r18, 0x01	; 1
 172:	82 17       	cp	r24, r18
 174:	21 f0       	breq	.+8      	; 0x17e <slaveSelector+0x24>
	{
		toggleBit(PORTB, PB0);
 176:	25 b1       	in	r18, 0x05	; 5
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	82 27       	eor	r24, r18
 17c:	85 b9       	out	0x05, r24	; 5
	}
	
	if(!(secondBit == pin2State))
 17e:	39 17       	cp	r19, r25
 180:	21 f0       	breq	.+8      	; 0x18a <slaveSelector+0x30>
	{
		toggleBit(PORTB, PB1);
 182:	95 b1       	in	r25, 0x05	; 5
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	89 27       	eor	r24, r25
 188:	85 b9       	out	0x05, r24	; 5
 18a:	08 95       	ret

0000018c <blinkLED>:
}


void blinkLED() //blinks the led. Ports are hardcoded.
{
	DDRB |= 0b00000100;	
 18c:	22 9a       	sbi	0x04, 2	; 4
	toggleBit(PORTB, PB2);
 18e:	95 b1       	in	r25, 0x05	; 5
 190:	84 e0       	ldi	r24, 0x04	; 4
 192:	98 27       	eor	r25, r24
 194:	95 b9       	out	0x05, r25	; 5
 196:	2f e9       	ldi	r18, 0x9F	; 159
 198:	36 e8       	ldi	r19, 0x86	; 134
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	30 40       	sbci	r19, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <blinkLED+0x10>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <blinkLED+0x1a>
 1a6:	00 00       	nop
	_delay_ms(500);
	toggleBit(PORTB, PB2);
 1a8:	95 b1       	in	r25, 0x05	; 5
 1aa:	89 27       	eor	r24, r25
 1ac:	85 b9       	out	0x05, r24	; 5
 1ae:	2f e9       	ldi	r18, 0x9F	; 159
 1b0:	36 e8       	ldi	r19, 0x86	; 134
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	30 40       	sbci	r19, 0x00	; 0
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <blinkLED+0x28>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <blinkLED+0x32>
 1be:	00 00       	nop
 1c0:	08 95       	ret

000001c2 <init>:
}

void init()
{
	unsigned int ubrr = baudRate;
	UART_init(ubrr);
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 81 00 	call	0x102	; 0x102 <UART_init>
	blinkLED();
 1ca:	0e 94 c6 00 	call	0x18c	; 0x18c <blinkLED>
	toggleBit(PORTB, PB2);
 1ce:	95 b1       	in	r25, 0x05	; 5
 1d0:	84 e0       	ldi	r24, 0x04	; 4
 1d2:	89 27       	eor	r24, r25
 1d4:	85 b9       	out	0x05, r24	; 5
 1d6:	08 95       	ret

000001d8 <transmitADCvalues>:
	
}

void transmitADCvalues(uint8_t ADCPort, char* stringToTransmit) //does the ADC conversion, then does the conversion and sends the raw ADC value and then the stringToTransmit.
{
 1d8:	cf 93       	push	r28
	int reading = ADCsingleRead(ADCPort);
 1da:	0e 94 4b 00 	call	0x96	; 0x96 <ADCsingleRead>
 1de:	c8 2f       	mov	r28, r24
	UART_putChar(reading >> 8); //Write the 2 bits in the "high" register
 1e0:	89 2f       	mov	r24, r25
 1e2:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_putChar>
	UART_putChar(reading); //write the remaining 8 bits
 1e6:	8c 2f       	mov	r24, r28
 1e8:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_putChar>
	
}
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <main>:

int main(void)
{
	
	init();	
 1f0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <init>
	
    /* Replace with your application code */
    while (1) 
    {
		
		char receivedChar = UART_getChar();
 1f4:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_getChar>
		switch(receivedChar) //massive switch case for commands
 1f8:	82 33       	cpi	r24, 0x32	; 50
 1fa:	59 f1       	breq	.+86     	; 0x252 <main+0x62>
 1fc:	28 f4       	brcc	.+10     	; 0x208 <main+0x18>
 1fe:	80 33       	cpi	r24, 0x30	; 48
 200:	91 f0       	breq	.+36     	; 0x226 <main+0x36>
 202:	81 33       	cpi	r24, 0x31	; 49
 204:	c9 f0       	breq	.+50     	; 0x238 <main+0x48>
 206:	46 c0       	rjmp	.+140    	; 0x294 <main+0xa4>
 208:	82 34       	cpi	r24, 0x42	; 66
 20a:	31 f0       	breq	.+12     	; 0x218 <main+0x28>
 20c:	84 35       	cpi	r24, 0x54	; 84
 20e:	d9 f1       	breq	.+118    	; 0x286 <main+0x96>
 210:	83 33       	cpi	r24, 0x33	; 51
 212:	09 f0       	breq	.+2      	; 0x216 <main+0x26>
 214:	3f c0       	rjmp	.+126    	; 0x294 <main+0xa4>
 216:	2a c0       	rjmp	.+84     	; 0x26c <main+0x7c>
		{
			case 'B': //blink code
				UART_putString("Blinking LED");
 218:	8b e2       	ldi	r24, 0x2B	; 43
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_putString>
				blinkLED();
 220:	0e 94 c6 00 	call	0x18c	; 0x18c <blinkLED>
				break;
 224:	37 c0       	rjmp	.+110    	; 0x294 <main+0xa4>
			case '0':
				slaveSelector(0);
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 ad 00 	call	0x15a	; 0x15a <slaveSelector>
				transmitADCvalues(0, "");
 22c:	6a e3       	ldi	r22, 0x3A	; 58
 22e:	71 e0       	ldi	r23, 0x01	; 1
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <transmitADCvalues>
				break;
 236:	2e c0       	rjmp	.+92     	; 0x294 <main+0xa4>
			case '1':
				slaveSelector(1);
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	0e 94 ad 00 	call	0x15a	; 0x15a <slaveSelector>
 23e:	cf ef       	ldi	r28, 0xFF	; 255
 240:	df e0       	ldi	r29, 0x0F	; 15
				while(counter < endCounter)
				{
					transmitADCvalues(0, "");
 242:	6a e3       	ldi	r22, 0x3A	; 58
 244:	71 e0       	ldi	r23, 0x01	; 1
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <transmitADCvalues>
 24c:	21 97       	sbiw	r28, 0x01	; 1
				slaveSelector(0);
				transmitADCvalues(0, "");
				break;
			case '1':
				slaveSelector(1);
				while(counter < endCounter)
 24e:	c9 f7       	brne	.-14     	; 0x242 <main+0x52>
 250:	21 c0       	rjmp	.+66     	; 0x294 <main+0xa4>
					counter++;
				}
				counter = 0;
				break;
			case '2':
				slaveSelector(2);
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	0e 94 ad 00 	call	0x15a	; 0x15a <slaveSelector>
 258:	cf ef       	ldi	r28, 0xFF	; 255
 25a:	df e0       	ldi	r29, 0x0F	; 15
				while(counter < endCounter)
				{
					transmitADCvalues(0, "");
 25c:	6a e3       	ldi	r22, 0x3A	; 58
 25e:	71 e0       	ldi	r23, 0x01	; 1
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <transmitADCvalues>
 266:	21 97       	sbiw	r28, 0x01	; 1
				}
				counter = 0;
				break;
			case '2':
				slaveSelector(2);
				while(counter < endCounter)
 268:	c9 f7       	brne	.-14     	; 0x25c <main+0x6c>
 26a:	14 c0       	rjmp	.+40     	; 0x294 <main+0xa4>
					counter++;
				}
				counter = 0;
				break;
			case '3':
				slaveSelector(3);
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	0e 94 ad 00 	call	0x15a	; 0x15a <slaveSelector>
 272:	cf ef       	ldi	r28, 0xFF	; 255
 274:	df e0       	ldi	r29, 0x0F	; 15
				while(counter < endCounter)
				{
					transmitADCvalues(0, "");
 276:	6a e3       	ldi	r22, 0x3A	; 58
 278:	71 e0       	ldi	r23, 0x01	; 1
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <transmitADCvalues>
 280:	21 97       	sbiw	r28, 0x01	; 1
				}
				counter = 0;
				break;
			case '3':
				slaveSelector(3);
				while(counter < endCounter)
 282:	c9 f7       	brne	.-14     	; 0x276 <main+0x86>
 284:	07 c0       	rjmp	.+14     	; 0x294 <main+0xa4>
					counter++;
				}
				counter = 0;
				break;
			case 'T':
				slaveSelector(0);
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	0e 94 ad 00 	call	0x15a	; 0x15a <slaveSelector>
				UART_putString("10");
 28c:	88 e3       	ldi	r24, 0x38	; 56
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_putString>
				//UART_putString("Donkey");
				break;
		}
		
		
		UART_putChar('\n');
 294:	8a e0       	ldi	r24, 0x0A	; 10
 296:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_putChar>
		
		
    }
 29a:	ac cf       	rjmp	.-168    	; 0x1f4 <main+0x4>

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
