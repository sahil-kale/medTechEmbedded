
MainCodeMedTechEmbedded.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000304  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000304  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d82  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000920  00000000  00000000  00001236  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000679  00000000  00000000  00001b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000021d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051d  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000044c  00000000  00000000  000027dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002c29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	2e 01       	movw	r4, r28
  6a:	3e 01       	movw	r6, r28
  6c:	4e 01       	movw	r8, r28
  6e:	5e 01       	movw	r10, r28
  70:	67 01       	movw	r12, r14
  72:	6b 01       	movw	r12, r22
  74:	6f 01       	movw	r12, r30
  76:	73 01       	movw	r14, r6
  78:	76 01       	movw	r14, r12
  7a:	76 01       	movw	r14, r12
  7c:	76 01       	movw	r14, r12
  7e:	76 01       	movw	r14, r12
  80:	76 01       	movw	r14, r12
  82:	76 01       	movw	r14, r12
  84:	76 01       	movw	r14, r12
  86:	76 01       	movw	r14, r12
  88:	76 01       	movw	r14, r12
  8a:	76 01       	movw	r14, r12
  8c:	27 01       	movw	r4, r14

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d8 e0       	ldi	r29, 0x08	; 8
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	11 e0       	ldi	r17, 0x01	; 1
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	e4 e0       	ldi	r30, 0x04	; 4
  a2:	f3 e0       	ldi	r31, 0x03	; 3
  a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a8 33       	cpi	r26, 0x38	; 56
  ac:	b1 07       	cpc	r27, r17
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>
  b0:	0e 94 18 01 	call	0x230	; 0x230 <main>
  b4:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <ADCsingleRead>:

int ADCsingleRead(uint8_t adcPort) //adcPort argument takes an integer from 0-5 that will specify the ADC to use. Easier than hard coding the port so that in the future, we can call the function :)
{
	int returnValue;
	//Reset Registers
	ADMUX = 0b00000000;
  bc:	ac e7       	ldi	r26, 0x7C	; 124
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	1c 92       	st	X, r1
	ADCSRA = 0b00000000;
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
	ADCSRB = 0b00000000;
  c8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
	
	ADMUX = adcPort;
  cc:	8c 93       	st	X, r24
	ADMUX |= (1 << REFS0) | (0 << ADLAR); //AVcc internal reference, left justify ADLAR. Plan is to output ADCH for now since this is a test
  ce:	8c 91       	ld	r24, X
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN) | (0 << ADPS2) | (1 << ADPS1) | (1<< ADPS0); //Enable the ADC, divide input clock by 8 for the ADC.
  d4:	80 81       	ld	r24, Z
  d6:	83 68       	ori	r24, 0x83	; 131
  d8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //Fire the cannon... I mean ADC
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24
	
	while(isBitSet(ADCSRA, ADSC)) //stalls the code while the ADC is initalizing/running
  e0:	80 81       	ld	r24, Z
  e2:	86 fd       	sbrc	r24, 6
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <ADCsingleRead+0x24>
	{}
	
	//the fake values were put in to avoid issues with manipulating ADCH and ADCL
	unsigned int fakeADCL = ADCL;
  e6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	unsigned int fakeADCH = ADCH;
  ea:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	returnValue = (fakeADCH << 8) + fakeADCL;
	return returnValue;
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	98 2f       	mov	r25, r24
  f2:	88 27       	eor	r24, r24
  f4:	82 0f       	add	r24, r18
  f6:	91 1d       	adc	r25, r1
  f8:	08 95       	ret

000000fa <UART_putChar>:
	UART_putChar('\n');
}

void UART_putChar(unsigned char data)
{
	while (isBitClear(UCSR0A, UDRE0)) //If UDRE0 0 bit is set to 1, the transmitter is ready to transmit again.
  fa:	e0 ec       	ldi	r30, 0xC0	; 192
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	95 ff       	sbrs	r25, 5
 102:	fd cf       	rjmp	.-6      	; 0xfe <UART_putChar+0x4>
	{}
	UDR0 = data;
 104:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 108:	08 95       	ret

0000010a <UART_putString>:
}

void UART_putString(char* stringA)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	ec 01       	movw	r28, r24
	while(*stringA != 0x00)
 110:	88 81       	ld	r24, Y
 112:	88 23       	and	r24, r24
 114:	31 f0       	breq	.+12     	; 0x122 <UART_putString+0x18>
 116:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_putChar(*stringA);
 118:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
	UDR0 = data;
}

void UART_putString(char* stringA)
{
	while(*stringA != 0x00)
 11c:	89 91       	ld	r24, Y+
 11e:	81 11       	cpse	r24, r1
 120:	fb cf       	rjmp	.-10     	; 0x118 <UART_putString+0xe>
	{
		UART_putChar(*stringA);
		stringA++;
	}
}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <UART_init>:

void UART_init(uint16_t ubrr) //takes in baud rate number
{
	//int ubrr = round(F_CPU/(16*baudRateTemp)-1);
	// set baudrate in UBRR
	UBRR0L = (uint8_t)(ubrr & 0xFF); //gets low bits for baudrate
 128:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UBRR0H = (uint8_t)(ubrr >> 8); //gets high bits for baudrate
 12c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>

	UCSR0C = (1 << USBS0)|(3 << UCSZ00); //Set frame format: 8data, 2stop bit
 130:	8e e0       	ldi	r24, 0x0E	; 14
 132:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>

	// enable the transmitter and receiver
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 136:	e1 ec       	ldi	r30, 0xC1	; 193
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 61       	ori	r24, 0x18	; 24
 13e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	2f eb       	ldi	r18, 0xBF	; 191
 142:	87 e2       	ldi	r24, 0x27	; 39
 144:	99 e0       	ldi	r25, 0x09	; 9
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <UART_init+0x1e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <UART_init+0x28>
 150:	00 00       	nop
	_delay_ms(3000);
	
	UART_putString("UART Initialized");
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 85 00 	call	0x10a	; 0x10a <UART_putString>
	UART_putChar('\n');
 15a:	8a e0       	ldi	r24, 0x0A	; 10
 15c:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
	UART_putString("Copyright Sahil Kale 2020");
 160:	81 e1       	ldi	r24, 0x11	; 17
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 85 00 	call	0x10a	; 0x10a <UART_putString>
	UART_putChar('\n');
 168:	8a e0       	ldi	r24, 0x0A	; 10
 16a:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
 16e:	08 95       	ret

00000170 <UART_getChar>:
}

unsigned char UART_getChar()
{
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
 170:	e0 ec       	ldi	r30, 0xC0	; 192
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 23       	and	r24, r24
 178:	ec f7       	brge	.-6      	; 0x174 <UART_getChar+0x4>
	{
		//blinkLED();
	}
	/* Get and return received data from buffer */
	return UDR0;
 17a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 17e:	08 95       	ret

00000180 <slaveSelector>:

void slaveSelector(uint8_t slaveSelectNumber) //Number between 0-7
{
	
	
	DDRB |= 0b00000111; //Ensure that the pins are set to output
 180:	94 b1       	in	r25, 0x04	; 4
 182:	97 60       	ori	r25, 0x07	; 7
 184:	94 b9       	out	0x04, r25	; 4
	
	//Acquire the individual bits for the slaveSelect byte
	bool firstBit = isBitSet(slaveSelectNumber, 0);
	bool secondBit = isBitSet(slaveSelectNumber, 1);
 186:	81 fb       	bst	r24, 1
 188:	55 27       	eor	r21, r21
 18a:	50 f9       	bld	r21, 0
	bool thirdBit = isBitSet(slaveSelectNumber, 2);
 18c:	82 fb       	bst	r24, 2
 18e:	44 27       	eor	r20, r20
 190:	40 f9       	bld	r20, 0
	
	//Acquire the current state of the bits in PORT B
	bool pin1State = isBitSet(PORTB, PB0);
 192:	35 b1       	in	r19, 0x05	; 5
	bool pin2State = isBitSet(PORTB, PB1);
 194:	25 b1       	in	r18, 0x05	; 5
 196:	26 95       	lsr	r18
 198:	21 70       	andi	r18, 0x01	; 1
	bool pin3State = isBitSet(PORTB, PB2);
 19a:	95 b1       	in	r25, 0x05	; 5
 19c:	92 fb       	bst	r25, 2
 19e:	99 27       	eor	r25, r25
 1a0:	90 f9       	bld	r25, 0
	UART_putChar('\n');
	*/
	
	
	//Compare and set
	if(!(firstBit == pin1State))
 1a2:	81 70       	andi	r24, 0x01	; 1
 1a4:	31 70       	andi	r19, 0x01	; 1
 1a6:	83 17       	cp	r24, r19
 1a8:	21 f0       	breq	.+8      	; 0x1b2 <slaveSelector+0x32>
	{
		toggleBit(PORTB, PB0);
 1aa:	35 b1       	in	r19, 0x05	; 5
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	83 27       	eor	r24, r19
 1b0:	85 b9       	out	0x05, r24	; 5
	}
	
	if(!(secondBit == pin2State))
 1b2:	52 17       	cp	r21, r18
 1b4:	21 f0       	breq	.+8      	; 0x1be <slaveSelector+0x3e>
	{
		toggleBit(PORTB, PB1);
 1b6:	25 b1       	in	r18, 0x05	; 5
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	82 27       	eor	r24, r18
 1bc:	85 b9       	out	0x05, r24	; 5
	}
	
	if(!(thirdBit == pin3State))
 1be:	49 17       	cp	r20, r25
 1c0:	21 f0       	breq	.+8      	; 0x1ca <slaveSelector+0x4a>
	{
		toggleBit(PORTB, PB2);
 1c2:	95 b1       	in	r25, 0x05	; 5
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	89 27       	eor	r24, r25
 1c8:	85 b9       	out	0x05, r24	; 5
 1ca:	08 95       	ret

000001cc <blinkLED>:
}


void blinkLED() //blinks the led. Ports are hardcoded.
{
	DDRB |= 0b00001000;	
 1cc:	23 9a       	sbi	0x04, 3	; 4
	toggleBit(PORTB, PB3);
 1ce:	95 b1       	in	r25, 0x05	; 5
 1d0:	88 e0       	ldi	r24, 0x08	; 8
 1d2:	98 27       	eor	r25, r24
 1d4:	95 b9       	out	0x05, r25	; 5
 1d6:	2f e9       	ldi	r18, 0x9F	; 159
 1d8:	36 e8       	ldi	r19, 0x86	; 134
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	30 40       	sbci	r19, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <blinkLED+0x10>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <blinkLED+0x1a>
 1e6:	00 00       	nop
	_delay_ms(500);
	toggleBit(PORTB, PB3);
 1e8:	95 b1       	in	r25, 0x05	; 5
 1ea:	89 27       	eor	r24, r25
 1ec:	85 b9       	out	0x05, r24	; 5
 1ee:	2f e9       	ldi	r18, 0x9F	; 159
 1f0:	36 e8       	ldi	r19, 0x86	; 134
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	30 40       	sbci	r19, 0x00	; 0
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <blinkLED+0x28>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <blinkLED+0x32>
 1fe:	00 00       	nop
 200:	08 95       	ret

00000202 <init>:
}

void init()
{
	unsigned int ubrr = baudRate;
	UART_init(ubrr);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 94 00 	call	0x128	; 0x128 <UART_init>
	blinkLED();
 20a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <blinkLED>
	toggleBit(PORTB, PB3);
 20e:	95 b1       	in	r25, 0x05	; 5
 210:	88 e0       	ldi	r24, 0x08	; 8
 212:	89 27       	eor	r24, r25
 214:	85 b9       	out	0x05, r24	; 5
 216:	08 95       	ret

00000218 <transmitADCvalues>:
	
}

void transmitADCvalues(uint8_t ADCPort, char* stringToTransmit) //does the ADC conversion, then does the conversion and sends the raw ADC value and then the stringToTransmit.
{
 218:	cf 93       	push	r28
	int reading = ADCsingleRead(ADCPort);
 21a:	0e 94 5e 00 	call	0xbc	; 0xbc <ADCsingleRead>
 21e:	c8 2f       	mov	r28, r24
	UART_putChar(reading >> 8);
 220:	89 2f       	mov	r24, r25
 222:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
	UART_putChar(reading);
 226:	8c 2f       	mov	r24, r28
 228:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
	//char buffer[11]; //Buffer must be # of bits + 1
	//itoa(reading, buffer, 2); //convert the bits to string
	//UART_putString(buffer);
	//UART_putString(stringToTransmit);
	
}
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <main>:

int main(void)
{
	
	init();	
 230:	0e 94 01 01 	call	0x202	; 0x202 <init>
	
    /* Replace with your application code */
    while (1) 
    {
		
		char receivedChar = UART_getChar();
 234:	0e 94 b8 00 	call	0x170	; 0x170 <UART_getChar>
		switch(receivedChar) //massive switch case for commands
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	fc 01       	movw	r30, r24
 23c:	f0 97       	sbiw	r30, 0x30	; 48
 23e:	e3 31       	cpi	r30, 0x13	; 19
 240:	f1 05       	cpc	r31, r1
 242:	08 f0       	brcs	.+2      	; 0x246 <main+0x16>
 244:	53 c0       	rjmp	.+166    	; 0x2ec <main+0xbc>
 246:	ec 5c       	subi	r30, 0xCC	; 204
 248:	ff 4f       	sbci	r31, 0xFF	; 255
 24a:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__tablejump2__>
		{
			case 'B': //blink code
				UART_putString("Blinking LED");
 24e:	8b e2       	ldi	r24, 0x2B	; 43
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	0e 94 85 00 	call	0x10a	; 0x10a <UART_putString>
				blinkLED();
 256:	0e 94 e6 00 	call	0x1cc	; 0x1cc <blinkLED>
				break;
 25a:	48 c0       	rjmp	.+144    	; 0x2ec <main+0xbc>
			case '0':
				slaveSelector(0);
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
 262:	cf ef       	ldi	r28, 0xFF	; 255
 264:	df e0       	ldi	r29, 0x0F	; 15
				while(counter < endCounter)
				{
					transmitADCvalues(0, "");
 266:	6a e2       	ldi	r22, 0x2A	; 42
 268:	71 e0       	ldi	r23, 0x01	; 1
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 0c 01 	call	0x218	; 0x218 <transmitADCvalues>
					counter++;
					UART_putChar('\n');
 270:	8a e0       	ldi	r24, 0x0A	; 10
 272:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
 276:	21 97       	sbiw	r28, 0x01	; 1
				UART_putString("Blinking LED");
				blinkLED();
				break;
			case '0':
				slaveSelector(0);
				while(counter < endCounter)
 278:	b1 f7       	brne	.-20     	; 0x266 <main+0x36>
 27a:	38 c0       	rjmp	.+112    	; 0x2ec <main+0xbc>
					UART_putChar('\n');
				}
				counter = 0;
				break;
			case '1':
				slaveSelector(1);
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
 282:	cf ef       	ldi	r28, 0xFF	; 255
 284:	df e0       	ldi	r29, 0x0F	; 15
				while(counter < endCounter)
				{
					transmitADCvalues(0, "");
 286:	6a e2       	ldi	r22, 0x2A	; 42
 288:	71 e0       	ldi	r23, 0x01	; 1
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 0c 01 	call	0x218	; 0x218 <transmitADCvalues>
					counter++;
					UART_putChar('\n');
 290:	8a e0       	ldi	r24, 0x0A	; 10
 292:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
 296:	21 97       	sbiw	r28, 0x01	; 1
				}
				counter = 0;
				break;
			case '1':
				slaveSelector(1);
				while(counter < endCounter)
 298:	b1 f7       	brne	.-20     	; 0x286 <main+0x56>
 29a:	28 c0       	rjmp	.+80     	; 0x2ec <main+0xbc>
					UART_putChar('\n');
				}
				counter = 0;
				break;
			case '2':
				slaveSelector(2);
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
 2a2:	cf ef       	ldi	r28, 0xFF	; 255
 2a4:	df e0       	ldi	r29, 0x0F	; 15
				while(counter < endCounter)
				{
					transmitADCvalues(0, "");
 2a6:	6a e2       	ldi	r22, 0x2A	; 42
 2a8:	71 e0       	ldi	r23, 0x01	; 1
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 0c 01 	call	0x218	; 0x218 <transmitADCvalues>
					counter++;
					UART_putChar('\n');
 2b0:	8a e0       	ldi	r24, 0x0A	; 10
 2b2:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
 2b6:	21 97       	sbiw	r28, 0x01	; 1
				}
				counter = 0;
				break;
			case '2':
				slaveSelector(2);
				while(counter < endCounter)
 2b8:	b1 f7       	brne	.-20     	; 0x2a6 <main+0x76>
 2ba:	18 c0       	rjmp	.+48     	; 0x2ec <main+0xbc>
					UART_putChar('\n');
				}
				counter = 0;
				break;
			case '3':
				slaveSelector(3);
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				transmitADCvalues(0, "");
 2c2:	6a e2       	ldi	r22, 0x2A	; 42
 2c4:	71 e0       	ldi	r23, 0x01	; 1
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	0e 94 0c 01 	call	0x218	; 0x218 <transmitADCvalues>
				break;
 2cc:	0f c0       	rjmp	.+30     	; 0x2ec <main+0xbc>
			case '4':
				slaveSelector(4);
 2ce:	84 e0       	ldi	r24, 0x04	; 4
 2d0:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				break;
 2d4:	0b c0       	rjmp	.+22     	; 0x2ec <main+0xbc>
			case '5':
				slaveSelector(5);
 2d6:	85 e0       	ldi	r24, 0x05	; 5
 2d8:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				break;
 2dc:	07 c0       	rjmp	.+14     	; 0x2ec <main+0xbc>
			case '6':
				slaveSelector(6);
 2de:	86 e0       	ldi	r24, 0x06	; 6
 2e0:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				break;
 2e4:	03 c0       	rjmp	.+6      	; 0x2ec <main+0xbc>
			case '7':
				slaveSelector(7);
 2e6:	87 e0       	ldi	r24, 0x07	; 7
 2e8:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				break;
		}
		
		//UART_putString("Sahil is Awesome :D");
		
		UART_putChar('\n');
 2ec:	8a e0       	ldi	r24, 0x0A	; 10
 2ee:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
		
		
    }
 2f2:	a0 cf       	rjmp	.-192    	; 0x234 <main+0x4>

000002f4 <__tablejump2__>:
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	05 90       	lpm	r0, Z+
 2fa:	f4 91       	lpm	r31, Z
 2fc:	e0 2d       	mov	r30, r0
 2fe:	09 94       	ijmp

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
