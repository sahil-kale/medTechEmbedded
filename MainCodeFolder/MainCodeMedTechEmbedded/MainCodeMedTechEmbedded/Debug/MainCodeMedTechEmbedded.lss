
MainCodeMedTechEmbedded.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000002d8  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d2d  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000920  00000000  00000000  000011b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000064f  00000000  00000000  00001ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00002124  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000057b  00000000  00000000  00002214  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000439  00000000  00000000  0000278f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002bc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	21 01       	movw	r4, r2
  6a:	2a 01       	movw	r4, r20
  6c:	37 01       	movw	r6, r14
  6e:	44 01       	movw	r8, r8
  70:	51 01       	movw	r10, r2
  72:	55 01       	movw	r10, r10
  74:	59 01       	movw	r10, r18
  76:	5d 01       	movw	r10, r26
  78:	60 01       	movw	r12, r0
  7a:	60 01       	movw	r12, r0
  7c:	60 01       	movw	r12, r0
  7e:	60 01       	movw	r12, r0
  80:	60 01       	movw	r12, r0
  82:	60 01       	movw	r12, r0
  84:	60 01       	movw	r12, r0
  86:	60 01       	movw	r12, r0
  88:	60 01       	movw	r12, r0
  8a:	60 01       	movw	r12, r0
  8c:	1a 01       	movw	r2, r20

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d8 e0       	ldi	r29, 0x08	; 8
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	11 e0       	ldi	r17, 0x01	; 1
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	e8 ed       	ldi	r30, 0xD8	; 216
  a2:	f2 e0       	ldi	r31, 0x02	; 2
  a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a8 33       	cpi	r26, 0x38	; 56
  ac:	b1 07       	cpc	r27, r17
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>
  b0:	0e 94 0b 01 	call	0x216	; 0x216 <main>
  b4:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <ADCsingleRead>:

int ADCsingleRead(uint8_t adcPort) //adcPort argument takes an integer from 0-5 that will specify the ADC to use. Easier than hard coding the port so that in the future, we can call the function :)
{
	int returnValue;
	//Reset Registers
	ADMUX = 0b00000000;
  bc:	ac e7       	ldi	r26, 0x7C	; 124
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	1c 92       	st	X, r1
	ADCSRA = 0b00000000;
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
	ADCSRB = 0b00000000;
  c8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
	
	ADMUX = adcPort;
  cc:	8c 93       	st	X, r24
	ADMUX |= (1 << REFS0) | (0 << ADLAR); //AVcc internal reference, left justify ADLAR. Plan is to output ADCH for now since this is a test
  ce:	8c 91       	ld	r24, X
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN) | (0 << ADPS2) | (1 << ADPS1) | (1<< ADPS0); //Enable the ADC, divide input clock by 8 for the ADC.
  d4:	80 81       	ld	r24, Z
  d6:	83 68       	ori	r24, 0x83	; 131
  d8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //Fire the cannon... I mean ADC
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24
	
	while(isBitSet(ADCSRA, ADSC)) //stalls the code while the ADC is initalizing/running
  e0:	80 81       	ld	r24, Z
  e2:	86 fd       	sbrc	r24, 6
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <ADCsingleRead+0x24>
	{}
	
	//the fake values were put in to avoid issues with manipulating ADCH and ADCL
	unsigned int fakeADCL = ADCL;
  e6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	unsigned int fakeADCH = ADCH;
  ea:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	returnValue = (fakeADCH << 8) + fakeADCL;
	return returnValue;
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	98 2f       	mov	r25, r24
  f2:	88 27       	eor	r24, r24
  f4:	82 0f       	add	r24, r18
  f6:	91 1d       	adc	r25, r1
  f8:	08 95       	ret

000000fa <UART_putChar>:
  fa:	e0 ec       	ldi	r30, 0xC0	; 192
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	95 ff       	sbrs	r25, 5
 102:	fd cf       	rjmp	.-6      	; 0xfe <UART_putChar+0x4>
 104:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 108:	08 95       	ret

0000010a <UART_putString>:
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	ec 01       	movw	r28, r24
 110:	88 81       	ld	r24, Y
 112:	88 23       	and	r24, r24
 114:	31 f0       	breq	.+12     	; 0x122 <UART_putString+0x18>
 116:	21 96       	adiw	r28, 0x01	; 1
 118:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
 11c:	89 91       	ld	r24, Y+
 11e:	81 11       	cpse	r24, r1
 120:	fb cf       	rjmp	.-10     	; 0x118 <UART_putString+0xe>
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <UART_init>:
 128:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 12c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 130:	8e e0       	ldi	r24, 0x0E	; 14
 132:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 136:	e1 ec       	ldi	r30, 0xC1	; 193
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 61       	ori	r24, 0x18	; 24
 13e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	2f eb       	ldi	r18, 0xBF	; 191
 142:	87 e2       	ldi	r24, 0x27	; 39
 144:	99 e0       	ldi	r25, 0x09	; 9
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <UART_init+0x1e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <UART_init+0x28>
 150:	00 00       	nop
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 85 00 	call	0x10a	; 0x10a <UART_putString>
 15a:	8a e0       	ldi	r24, 0x0A	; 10
 15c:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
 160:	81 e1       	ldi	r24, 0x11	; 17
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 85 00 	call	0x10a	; 0x10a <UART_putString>
 168:	8a e0       	ldi	r24, 0x0A	; 10
 16a:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
 16e:	08 95       	ret

00000170 <UART_getChar>:
 170:	e0 ec       	ldi	r30, 0xC0	; 192
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 23       	and	r24, r24
 178:	ec f7       	brge	.-6      	; 0x174 <UART_getChar+0x4>
 17a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 17e:	08 95       	ret

00000180 <slaveSelector>:

void slaveSelector(uint8_t slaveSelectNumber) //Number between 0-7
{
	
	
	DDRB |= 0b00000111; //Ensure that the pins are set to output
 180:	94 b1       	in	r25, 0x04	; 4
 182:	97 60       	ori	r25, 0x07	; 7
 184:	94 b9       	out	0x04, r25	; 4
	
	//Acquire the individual bits for the slaveSelect byte
	bool firstBit = isBitSet(slaveSelectNumber, 0);
	bool secondBit = isBitSet(slaveSelectNumber, 1);
 186:	81 fb       	bst	r24, 1
 188:	33 27       	eor	r19, r19
 18a:	30 f9       	bld	r19, 0
	//bool thirdBit = isBitSet(slaveSelectNumber, 2);
	
	//Acquire the current state of the bits in PORT B
	bool pin1State = isBitSet(PORTB, PB0);
 18c:	25 b1       	in	r18, 0x05	; 5
	bool pin2State = isBitSet(PORTB, PB1);
 18e:	95 b1       	in	r25, 0x05	; 5
 190:	96 95       	lsr	r25
 192:	91 70       	andi	r25, 0x01	; 1
	UART_putChar('\n');
	*/
	
	
	//Compare and set
	if(!(firstBit == pin1State))
 194:	81 70       	andi	r24, 0x01	; 1
 196:	21 70       	andi	r18, 0x01	; 1
 198:	82 17       	cp	r24, r18
 19a:	21 f0       	breq	.+8      	; 0x1a4 <slaveSelector+0x24>
	{
		toggleBit(PORTB, PB0);
 19c:	25 b1       	in	r18, 0x05	; 5
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	82 27       	eor	r24, r18
 1a2:	85 b9       	out	0x05, r24	; 5
	}
	
	if(!(secondBit == pin2State))
 1a4:	39 17       	cp	r19, r25
 1a6:	21 f0       	breq	.+8      	; 0x1b0 <slaveSelector+0x30>
	{
		toggleBit(PORTB, PB1);
 1a8:	95 b1       	in	r25, 0x05	; 5
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	89 27       	eor	r24, r25
 1ae:	85 b9       	out	0x05, r24	; 5
 1b0:	08 95       	ret

000001b2 <blinkLED>:
}


void blinkLED() //blinks the led. Ports are hardcoded.
{
	DDRB |= 0b00000100;	
 1b2:	22 9a       	sbi	0x04, 2	; 4
	toggleBit(PORTB, PB2);
 1b4:	95 b1       	in	r25, 0x05	; 5
 1b6:	84 e0       	ldi	r24, 0x04	; 4
 1b8:	98 27       	eor	r25, r24
 1ba:	95 b9       	out	0x05, r25	; 5
 1bc:	2f e9       	ldi	r18, 0x9F	; 159
 1be:	36 e8       	ldi	r19, 0x86	; 134
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	30 40       	sbci	r19, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <blinkLED+0x10>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <blinkLED+0x1a>
 1cc:	00 00       	nop
	_delay_ms(500);
	toggleBit(PORTB, PB2);
 1ce:	95 b1       	in	r25, 0x05	; 5
 1d0:	89 27       	eor	r24, r25
 1d2:	85 b9       	out	0x05, r24	; 5
 1d4:	2f e9       	ldi	r18, 0x9F	; 159
 1d6:	36 e8       	ldi	r19, 0x86	; 134
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	30 40       	sbci	r19, 0x00	; 0
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <blinkLED+0x28>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <blinkLED+0x32>
 1e4:	00 00       	nop
 1e6:	08 95       	ret

000001e8 <init>:
}

void init()
{
	unsigned int ubrr = baudRate;
	UART_init(ubrr);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 94 00 	call	0x128	; 0x128 <UART_init>
	blinkLED();
 1f0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <blinkLED>
	toggleBit(PORTB, PB2);
 1f4:	95 b1       	in	r25, 0x05	; 5
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	89 27       	eor	r24, r25
 1fa:	85 b9       	out	0x05, r24	; 5
 1fc:	08 95       	ret

000001fe <transmitADCvalues>:
	
}

void transmitADCvalues(uint8_t ADCPort, char* stringToTransmit) //does the ADC conversion, then does the conversion and sends the raw ADC value and then the stringToTransmit.
{
 1fe:	cf 93       	push	r28
	int reading = ADCsingleRead(ADCPort);
 200:	0e 94 5e 00 	call	0xbc	; 0xbc <ADCsingleRead>
 204:	c8 2f       	mov	r28, r24
	UART_putChar(reading >> 8); //Write the 2 bits in the "high" register
 206:	89 2f       	mov	r24, r25
 208:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
	UART_putChar(reading); //write the remaining 8 bits
 20c:	8c 2f       	mov	r24, r28
 20e:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
	
}
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <main>:

int main(void)
{
	
	init();	
 216:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <init>
	
    /* Replace with your application code */
    while (1) 
    {
		
		char receivedChar = UART_getChar();
 21a:	0e 94 b8 00 	call	0x170	; 0x170 <UART_getChar>
		switch(receivedChar) //massive switch case for commands
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	fc 01       	movw	r30, r24
 222:	f0 97       	sbiw	r30, 0x30	; 48
 224:	e3 31       	cpi	r30, 0x13	; 19
 226:	f1 05       	cpc	r31, r1
 228:	08 f0       	brcs	.+2      	; 0x22c <main+0x16>
 22a:	4a c0       	rjmp	.+148    	; 0x2c0 <main+0xaa>
 22c:	ec 5c       	subi	r30, 0xCC	; 204
 22e:	ff 4f       	sbci	r31, 0xFF	; 255
 230:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__tablejump2__>
		{
			case 'B': //blink code
				UART_putString("Blinking LED");
 234:	8b e2       	ldi	r24, 0x2B	; 43
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	0e 94 85 00 	call	0x10a	; 0x10a <UART_putString>
				blinkLED();
 23c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <blinkLED>
				break;
 240:	3f c0       	rjmp	.+126    	; 0x2c0 <main+0xaa>
			case '0':
				slaveSelector(0);
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				transmitADCvalues(0, "");
 248:	6a e2       	ldi	r22, 0x2A	; 42
 24a:	71 e0       	ldi	r23, 0x01	; 1
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <transmitADCvalues>
				break;
 252:	36 c0       	rjmp	.+108    	; 0x2c0 <main+0xaa>
			case '1':
				slaveSelector(1);
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
 25a:	cf ef       	ldi	r28, 0xFF	; 255
 25c:	df e0       	ldi	r29, 0x0F	; 15
				while(counter < endCounter)
				{
					transmitADCvalues(0, "");
 25e:	6a e2       	ldi	r22, 0x2A	; 42
 260:	71 e0       	ldi	r23, 0x01	; 1
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 ff 00 	call	0x1fe	; 0x1fe <transmitADCvalues>
 268:	21 97       	sbiw	r28, 0x01	; 1
				slaveSelector(0);
				transmitADCvalues(0, "");
				break;
			case '1':
				slaveSelector(1);
				while(counter < endCounter)
 26a:	c9 f7       	brne	.-14     	; 0x25e <main+0x48>
 26c:	29 c0       	rjmp	.+82     	; 0x2c0 <main+0xaa>
					counter++;
				}
				counter = 0;
				break;
			case '2':
				slaveSelector(2);
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
 274:	cf ef       	ldi	r28, 0xFF	; 255
 276:	df e0       	ldi	r29, 0x0F	; 15
				while(counter < endCounter)
				{
					transmitADCvalues(0, "");
 278:	6a e2       	ldi	r22, 0x2A	; 42
 27a:	71 e0       	ldi	r23, 0x01	; 1
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <transmitADCvalues>
 282:	21 97       	sbiw	r28, 0x01	; 1
				}
				counter = 0;
				break;
			case '2':
				slaveSelector(2);
				while(counter < endCounter)
 284:	c9 f7       	brne	.-14     	; 0x278 <main+0x62>
 286:	1c c0       	rjmp	.+56     	; 0x2c0 <main+0xaa>
					counter++;
				}
				counter = 0;
				break;
			case '3':
				slaveSelector(3);
 288:	83 e0       	ldi	r24, 0x03	; 3
 28a:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
 28e:	cf ef       	ldi	r28, 0xFF	; 255
 290:	df e0       	ldi	r29, 0x0F	; 15
				while(counter < endCounter)
				{
					transmitADCvalues(0, "");
 292:	6a e2       	ldi	r22, 0x2A	; 42
 294:	71 e0       	ldi	r23, 0x01	; 1
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 ff 00 	call	0x1fe	; 0x1fe <transmitADCvalues>
 29c:	21 97       	sbiw	r28, 0x01	; 1
				}
				counter = 0;
				break;
			case '3':
				slaveSelector(3);
				while(counter < endCounter)
 29e:	c9 f7       	brne	.-14     	; 0x292 <main+0x7c>
 2a0:	0f c0       	rjmp	.+30     	; 0x2c0 <main+0xaa>
					counter++;
				}
				counter = 0;
				break;
			case '4':
				slaveSelector(4);
 2a2:	84 e0       	ldi	r24, 0x04	; 4
 2a4:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				break;
 2a8:	0b c0       	rjmp	.+22     	; 0x2c0 <main+0xaa>
			case '5':
				slaveSelector(5);
 2aa:	85 e0       	ldi	r24, 0x05	; 5
 2ac:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				break;
 2b0:	07 c0       	rjmp	.+14     	; 0x2c0 <main+0xaa>
			case '6':
				slaveSelector(6);
 2b2:	86 e0       	ldi	r24, 0x06	; 6
 2b4:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				break;
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <main+0xaa>
			case '7':
				slaveSelector(7);
 2ba:	87 e0       	ldi	r24, 0x07	; 7
 2bc:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				//UART_putString("Donkey");
				break;
		}
		
		
		UART_putChar('\n');
 2c0:	8a e0       	ldi	r24, 0x0A	; 10
 2c2:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
		
		
    }
 2c6:	a9 cf       	rjmp	.-174    	; 0x21a <main+0x4>

000002c8 <__tablejump2__>:
 2c8:	ee 0f       	add	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	05 90       	lpm	r0, Z+
 2ce:	f4 91       	lpm	r31, Z
 2d0:	e0 2d       	mov	r30, r0
 2d2:	09 94       	ijmp

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
