
MainCodeMedTechEmbedded.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000334  000003a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000334  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bb1  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080b  00000000  00000000  0000104d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000494  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001cec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000506  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c9  00000000  00000000  000022de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000026a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 35 01 	call	0x26a	; 0x26a <main>
  8e:	0c 94 98 01 	jmp	0x330	; 0x330 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <slaveSelector>:
#define isBitSet(byte, bit) (byte & (1 << bit))
#define isBitClear(byte, bit) !(byte & (1 << bit))
#define toggleBit(byte, bit) (byte ^= (1 << bit))

void slaveSelector(uint8_t slaveSelectNumber) //Number between 0-7
{
  96:	98 2f       	mov	r25, r24
	DDRB |= 0b00001110;
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	8e 60       	ori	r24, 0x0E	; 14
  9c:	84 b9       	out	0x04, r24	; 4
	bool firstBit = isBitSet(slaveSelectNumber, 2);
	bool secondBit = isBitSet(slaveSelectNumber, 1);
  9e:	91 fb       	bst	r25, 1
  a0:	44 27       	eor	r20, r20
  a2:	40 f9       	bld	r20, 0
	bool thirdBit = isBitSet(slaveSelectNumber, 0);
  a4:	29 2f       	mov	r18, r25
  a6:	21 70       	andi	r18, 0x01	; 1
	
	if(!(firstBit == isBitSet(PORTB, PB1)))
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	92 fb       	bst	r25, 2
  ac:	66 27       	eor	r22, r22
  ae:	60 f9       	bld	r22, 0
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	82 70       	andi	r24, 0x02	; 2
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	68 17       	cp	r22, r24
  b8:	79 07       	cpc	r23, r25
  ba:	21 f0       	breq	.+8      	; 0xc4 <slaveSelector+0x2e>
	{
		toggleBit(PORTB, PB1);
  bc:	95 b1       	in	r25, 0x05	; 5
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	89 27       	eor	r24, r25
  c2:	85 b9       	out	0x05, r24	; 5
	}
	
	if(!(secondBit == isBitSet(PORTB, PB2)))
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	84 70       	andi	r24, 0x04	; 4
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	48 17       	cp	r20, r24
  ce:	59 07       	cpc	r21, r25
  d0:	21 f0       	breq	.+8      	; 0xda <slaveSelector+0x44>
	{
		toggleBit(PORTB, PB2);
  d2:	95 b1       	in	r25, 0x05	; 5
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	89 27       	eor	r24, r25
  d8:	85 b9       	out	0x05, r24	; 5
	}
	
	if(!(thirdBit == isBitSet(PORTB, PB3)))
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	88 70       	andi	r24, 0x08	; 8
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	28 17       	cp	r18, r24
  e4:	39 07       	cpc	r19, r25
  e6:	21 f0       	breq	.+8      	; 0xf0 <slaveSelector+0x5a>
	{
		toggleBit(PORTB, PB3);
  e8:	95 b1       	in	r25, 0x05	; 5
  ea:	88 e0       	ldi	r24, 0x08	; 8
  ec:	89 27       	eor	r24, r25
  ee:	85 b9       	out	0x05, r24	; 5
  f0:	08 95       	ret

000000f2 <ADCsingleRead>:

int ADCsingleRead(uint8_t adcPort) //adcPort argument takes an integer from 0-5 that will specify the ADC to use. Easier than hard coding the port so that in the future, we can call the function :)
{
	int returnValue;
	//Reset Registers
	ADMUX = 0b00000000;
  f2:	ac e7       	ldi	r26, 0x7C	; 124
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	1c 92       	st	X, r1
	ADCSRA = 0b00000000;
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	10 82       	st	Z, r1
	ADCSRB = 0b00000000;
  fe:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
	
	ADMUX = adcPort;
 102:	8c 93       	st	X, r24
	ADMUX |= (1 << REFS0) | (0 << ADLAR); //AVcc internal reference, left justify ADLAR. Plan is to output ADCH for now since this is a test
 104:	8c 91       	ld	r24, X
 106:	80 64       	ori	r24, 0x40	; 64
 108:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0); //Enable the ADC, divide input clock by 8 for the ADC.
 10a:	80 81       	ld	r24, Z
 10c:	83 68       	ori	r24, 0x83	; 131
 10e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //Fire the cannon... I mean ADC
 110:	80 81       	ld	r24, Z
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 83       	st	Z, r24
	
	while(isBitSet(ADCSRA, ADSC)) //stalls the code while the ADC is initalizing/running
 116:	80 81       	ld	r24, Z
 118:	86 fd       	sbrc	r24, 6
 11a:	fd cf       	rjmp	.-6      	; 0x116 <ADCsingleRead+0x24>
	{}
		
	//the fake values were put in to avoid issues with manipulating ADCH and ADCL
	unsigned int fakeADCL = ADCL;
 11c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	unsigned int fakeADCH = ADCH;	
 120:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	returnValue = (fakeADCH << 8) + fakeADCL;
	return returnValue;
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	98 2f       	mov	r25, r24
 128:	88 27       	eor	r24, r24
}
 12a:	82 0f       	add	r24, r18
 12c:	91 1d       	adc	r25, r1
 12e:	08 95       	ret

00000130 <UART_putChar>:


void UART_putChar(unsigned char data)
{
	while (isBitClear(UCSR0A, UDRE0)) //If UDRE0 0 bit is set to 1, the transmitter is ready to transmit again.
 130:	e0 ec       	ldi	r30, 0xC0	; 192
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	90 81       	ld	r25, Z
 136:	95 ff       	sbrs	r25, 5
 138:	fd cf       	rjmp	.-6      	; 0x134 <UART_putChar+0x4>
	{}
	UDR0 = data;
 13a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 13e:	08 95       	ret

00000140 <UART_putString>:
}

void UART_putString(char* stringA)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ec 01       	movw	r28, r24
	while(*stringA != 0x00)
 146:	88 81       	ld	r24, Y
 148:	88 23       	and	r24, r24
 14a:	31 f0       	breq	.+12     	; 0x158 <UART_putString+0x18>
 14c:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_putChar(*stringA);
 14e:	0e 94 98 00 	call	0x130	; 0x130 <UART_putChar>
	UDR0 = data;
}

void UART_putString(char* stringA)
{
	while(*stringA != 0x00)
 152:	89 91       	ld	r24, Y+
 154:	81 11       	cpse	r24, r1
 156:	fb cf       	rjmp	.-10     	; 0x14e <UART_putString+0xe>
	{
		UART_putChar(*stringA);
		stringA++;
	}
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <UART_getChar>:

unsigned char UART_getChar()
{
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
 15e:	e0 ec       	ldi	r30, 0xC0	; 192
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	88 23       	and	r24, r24
 166:	ec f7       	brge	.-6      	; 0x162 <UART_getChar+0x4>
	{
		//blinkLED();
	}
	/* Get and return received data from buffer */
	return UDR0;
 168:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 16c:	08 95       	ret

0000016e <UART_init>:


void UART_init(uint16_t ubrr) //takes in baud rate number
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
 176:	61 97       	sbiw	r28, 0x11	; 17
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	f8 94       	cli
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	0f be       	out	0x3f, r0	; 63
 180:	cd bf       	out	0x3d, r28	; 61
	// set baudrate in UBRR
	UBRR0L = (uint8_t)(ubrr & 0xFF); //gets low bits for baudrate
 182:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UBRR0H = (uint8_t)(ubrr >> 8); //gets high bits for baudrate
 186:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>

	UCSR0C = (1 << USBS0)|(3 << UCSZ00); //Set frame format: 8data, 2stop bit
 18a:	8e e0       	ldi	r24, 0x0E	; 14
 18c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>

	// enable the transmitter and receiver
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 190:	e1 ec       	ldi	r30, 0xC1	; 193
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	88 61       	ori	r24, 0x18	; 24
 198:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	2f e3       	ldi	r18, 0x3F	; 63
 19c:	82 e4       	ldi	r24, 0x42	; 66
 19e:	9f e0       	ldi	r25, 0x0F	; 15
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <UART_init+0x32>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <UART_init+0x3c>
 1aa:	00 00       	nop
	_delay_ms(5000);
	
	char initString[] = "UART Initialized";
 1ac:	81 e1       	ldi	r24, 0x11	; 17
 1ae:	e0 e0       	ldi	r30, 0x00	; 0
 1b0:	f1 e0       	ldi	r31, 0x01	; 1
 1b2:	de 01       	movw	r26, r28
 1b4:	11 96       	adiw	r26, 0x01	; 1
 1b6:	01 90       	ld	r0, Z+
 1b8:	0d 92       	st	X+, r0
 1ba:	8a 95       	dec	r24
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <UART_init+0x48>
	UART_putString(initString);
 1be:	ce 01       	movw	r24, r28
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	0e 94 a0 00 	call	0x140	; 0x140 <UART_putString>
}
 1c6:	61 96       	adiw	r28, 0x11	; 17
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	f8 94       	cli
 1cc:	de bf       	out	0x3e, r29	; 62
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	cd bf       	out	0x3d, r28	; 61
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <blinkLED>:

void blinkLED() //blinks the led. Ports are hardcoded.
{
	DDRB |= 0b00000001;	
 1d8:	20 9a       	sbi	0x04, 0	; 4
	toggleBit(PORTB, PB0);
 1da:	95 b1       	in	r25, 0x05	; 5
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	98 27       	eor	r25, r24
 1e0:	95 b9       	out	0x05, r25	; 5
 1e2:	2f e9       	ldi	r18, 0x9F	; 159
 1e4:	36 e8       	ldi	r19, 0x86	; 134
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	30 40       	sbci	r19, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <blinkLED+0x10>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <blinkLED+0x1a>
 1f2:	00 00       	nop
	_delay_ms(500);
	toggleBit(PORTB, PB0);
 1f4:	95 b1       	in	r25, 0x05	; 5
 1f6:	89 27       	eor	r24, r25
 1f8:	85 b9       	out	0x05, r24	; 5
 1fa:	2f e9       	ldi	r18, 0x9F	; 159
 1fc:	36 e8       	ldi	r19, 0x86	; 134
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	21 50       	subi	r18, 0x01	; 1
 202:	30 40       	sbci	r19, 0x00	; 0
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <blinkLED+0x28>
 208:	00 c0       	rjmp	.+0      	; 0x20a <blinkLED+0x32>
 20a:	00 00       	nop
 20c:	08 95       	ret

0000020e <init>:

void init()
{
	
	unsigned int ubrr = baudRate;
	UART_init(ubrr);
 20e:	8c e0       	ldi	r24, 0x0C	; 12
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 b7 00 	call	0x16e	; 0x16e <UART_init>
	
	
	blinkLED();
 216:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <blinkLED>
 21a:	08 95       	ret

0000021c <transmitADCvalues>:
	
}

void transmitADCvalues(uint8_t ADCPort, char* stringToTransmit) //does the ADC conversion, then does the conversion and sends the raw ADC value and then the stringToTransmit.
{
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
 228:	2b 97       	sbiw	r28, 0x0b	; 11
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	f8 94       	cli
 22e:	de bf       	out	0x3e, r29	; 62
 230:	0f be       	out	0x3f, r0	; 63
 232:	cd bf       	out	0x3d, r28	; 61
 234:	8b 01       	movw	r16, r22
	int reading = ADCsingleRead(ADCPort);
 236:	0e 94 79 00 	call	0xf2	; 0xf2 <ADCsingleRead>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 23a:	42 e0       	ldi	r20, 0x02	; 2
 23c:	be 01       	movw	r22, r28
 23e:	6f 5f       	subi	r22, 0xFF	; 255
 240:	7f 4f       	sbci	r23, 0xFF	; 255
 242:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__itoa_ncheck>
	char buffer[11];
	itoa(reading, buffer, 2);
	UART_putString(buffer);
 246:	ce 01       	movw	r24, r28
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	0e 94 a0 00 	call	0x140	; 0x140 <UART_putString>
	UART_putString(stringToTransmit);
 24e:	c8 01       	movw	r24, r16
 250:	0e 94 a0 00 	call	0x140	; 0x140 <UART_putString>
	
}
 254:	2b 96       	adiw	r28, 0x0b	; 11
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	f8 94       	cli
 25a:	de bf       	out	0x3e, r29	; 62
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	cd bf       	out	0x3d, r28	; 61
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	08 95       	ret

0000026a <main>:

int main(void)
{
	
	init();	
 26a:	0e 94 07 01 	call	0x20e	; 0x20e <init>
    /* Replace with your application code */
    while (1) 
    {

		
		char receivedChar = UART_getChar();
 26e:	0e 94 af 00 	call	0x15e	; 0x15e <UART_getChar>
		
		switch(receivedChar)
 272:	82 33       	cpi	r24, 0x32	; 50
 274:	e1 f0       	breq	.+56     	; 0x2ae <main+0x44>
 276:	28 f4       	brcc	.+10     	; 0x282 <main+0x18>
 278:	80 33       	cpi	r24, 0x30	; 48
 27a:	89 f0       	breq	.+34     	; 0x29e <main+0x34>
 27c:	81 33       	cpi	r24, 0x31	; 49
 27e:	99 f0       	breq	.+38     	; 0x2a6 <main+0x3c>
 280:	1a c0       	rjmp	.+52     	; 0x2b6 <main+0x4c>
 282:	82 34       	cpi	r24, 0x42	; 66
 284:	19 f0       	breq	.+6      	; 0x28c <main+0x22>
 286:	84 35       	cpi	r24, 0x54	; 84
 288:	21 f0       	breq	.+8      	; 0x292 <main+0x28>
 28a:	15 c0       	rjmp	.+42     	; 0x2b6 <main+0x4c>
		{
			case 'B': //blink code
				blinkLED();
 28c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <blinkLED>
				break;
 290:	16 c0       	rjmp	.+44     	; 0x2be <main+0x54>
				
			case 'T': //Temperature code				

				transmitADCvalues(5,"TempC");
 292:	61 e1       	ldi	r22, 0x11	; 17
 294:	71 e0       	ldi	r23, 0x01	; 1
 296:	85 e0       	ldi	r24, 0x05	; 5
 298:	0e 94 0e 01 	call	0x21c	; 0x21c <transmitADCvalues>
				break;
 29c:	10 c0       	rjmp	.+32     	; 0x2be <main+0x54>
			case '0':
				slaveSelector(0);
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 4b 00 	call	0x96	; 0x96 <slaveSelector>
				break;
 2a4:	0c c0       	rjmp	.+24     	; 0x2be <main+0x54>
			case '1':
				slaveSelector(1);
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 4b 00 	call	0x96	; 0x96 <slaveSelector>
				break;
 2ac:	08 c0       	rjmp	.+16     	; 0x2be <main+0x54>
			case '2':
				slaveSelector(2);
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	0e 94 4b 00 	call	0x96	; 0x96 <slaveSelector>
				break;
 2b4:	04 c0       	rjmp	.+8      	; 0x2be <main+0x54>
			default:
				UART_putString("Donkey");
 2b6:	87 e1       	ldi	r24, 0x17	; 23
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 a0 00 	call	0x140	; 0x140 <UART_putString>
			
		}
		
		UART_putChar('\n');
 2be:	8a e0       	ldi	r24, 0x0A	; 10
 2c0:	0e 94 98 00 	call	0x130	; 0x130 <UART_putChar>
		
    }
 2c4:	d4 cf       	rjmp	.-88     	; 0x26e <main+0x4>

000002c6 <__itoa_ncheck>:
 2c6:	bb 27       	eor	r27, r27
 2c8:	4a 30       	cpi	r20, 0x0A	; 10
 2ca:	31 f4       	brne	.+12     	; 0x2d8 <__itoa_ncheck+0x12>
 2cc:	99 23       	and	r25, r25
 2ce:	22 f4       	brpl	.+8      	; 0x2d8 <__itoa_ncheck+0x12>
 2d0:	bd e2       	ldi	r27, 0x2D	; 45
 2d2:	90 95       	com	r25
 2d4:	81 95       	neg	r24
 2d6:	9f 4f       	sbci	r25, 0xFF	; 255
 2d8:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__utoa_common>

000002dc <__utoa_ncheck>:
 2dc:	bb 27       	eor	r27, r27

000002de <__utoa_common>:
 2de:	fb 01       	movw	r30, r22
 2e0:	55 27       	eor	r21, r21
 2e2:	aa 27       	eor	r26, r26
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	aa 1f       	adc	r26, r26
 2ea:	a4 17       	cp	r26, r20
 2ec:	10 f0       	brcs	.+4      	; 0x2f2 <__utoa_common+0x14>
 2ee:	a4 1b       	sub	r26, r20
 2f0:	83 95       	inc	r24
 2f2:	50 51       	subi	r21, 0x10	; 16
 2f4:	b9 f7       	brne	.-18     	; 0x2e4 <__utoa_common+0x6>
 2f6:	a0 5d       	subi	r26, 0xD0	; 208
 2f8:	aa 33       	cpi	r26, 0x3A	; 58
 2fa:	08 f0       	brcs	.+2      	; 0x2fe <__utoa_common+0x20>
 2fc:	a9 5d       	subi	r26, 0xD9	; 217
 2fe:	a1 93       	st	Z+, r26
 300:	00 97       	sbiw	r24, 0x00	; 0
 302:	79 f7       	brne	.-34     	; 0x2e2 <__utoa_common+0x4>
 304:	b1 11       	cpse	r27, r1
 306:	b1 93       	st	Z+, r27
 308:	11 92       	st	Z+, r1
 30a:	cb 01       	movw	r24, r22
 30c:	0c 94 88 01 	jmp	0x310	; 0x310 <strrev>

00000310 <strrev>:
 310:	dc 01       	movw	r26, r24
 312:	fc 01       	movw	r30, r24
 314:	67 2f       	mov	r22, r23
 316:	71 91       	ld	r23, Z+
 318:	77 23       	and	r23, r23
 31a:	e1 f7       	brne	.-8      	; 0x314 <strrev+0x4>
 31c:	32 97       	sbiw	r30, 0x02	; 2
 31e:	04 c0       	rjmp	.+8      	; 0x328 <strrev+0x18>
 320:	7c 91       	ld	r23, X
 322:	6d 93       	st	X+, r22
 324:	70 83       	st	Z, r23
 326:	62 91       	ld	r22, -Z
 328:	ae 17       	cp	r26, r30
 32a:	bf 07       	cpc	r27, r31
 32c:	c8 f3       	brcs	.-14     	; 0x320 <strrev+0x10>
 32e:	08 95       	ret

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
