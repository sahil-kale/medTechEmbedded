
MainCodeMedTechEmbedded.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  000003ee  00000462  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ed0  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000983  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d3  00000000  00000000  00001e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  000024e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000540  00000000  00000000  00002610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000471  00000000  00000000  00002b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002fc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 47 00 	jmp	0x8e	; 0x8e <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	88 01       	movw	r16, r16
  6a:	91 01       	movw	r18, r2
  6c:	9a 01       	movw	r18, r20
  6e:	a3 01       	movw	r20, r6
  70:	a7 01       	movw	r20, r14
  72:	ab 01       	movw	r20, r22
  74:	af 01       	movw	r20, r30
  76:	b3 01       	movw	r22, r6
  78:	b6 01       	movw	r22, r12
  7a:	b6 01       	movw	r22, r12
  7c:	b6 01       	movw	r22, r12
  7e:	b6 01       	movw	r22, r12
  80:	b6 01       	movw	r22, r12
  82:	b6 01       	movw	r22, r12
  84:	b6 01       	movw	r22, r12
  86:	b6 01       	movw	r22, r12
  88:	b6 01       	movw	r22, r12
  8a:	b6 01       	movw	r22, r12
  8c:	81 01       	movw	r16, r2

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d8 e0       	ldi	r29, 0x08	; 8
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	11 e0       	ldi	r17, 0x01	; 1
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	ee ee       	ldi	r30, 0xEE	; 238
  a2:	f3 e0       	ldi	r31, 0x03	; 3
  a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a6 35       	cpi	r26, 0x56	; 86
  ac:	b1 07       	cpc	r27, r17
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>
  b0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <main>
  b4:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <ADCsingleRead>:

int ADCsingleRead(uint8_t adcPort) //adcPort argument takes an integer from 0-5 that will specify the ADC to use. Easier than hard coding the port so that in the future, we can call the function :)
{
	int returnValue;
	//Reset Registers
	ADMUX = 0b00000000;
  bc:	ac e7       	ldi	r26, 0x7C	; 124
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	1c 92       	st	X, r1
	ADCSRA = 0b00000000;
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
	ADCSRB = 0b00000000;
  c8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
	
	ADMUX = adcPort;
  cc:	8c 93       	st	X, r24
	ADMUX |= (1 << REFS0) | (0 << ADLAR); //AVcc internal reference, left justify ADLAR. Plan is to output ADCH for now since this is a test
  ce:	8c 91       	ld	r24, X
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //Enable the ADC, divide input clock by 8 for the ADC.
  d4:	80 81       	ld	r24, Z
  d6:	87 68       	ori	r24, 0x87	; 135
  d8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //Fire the cannon... I mean ADC
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24
	
	while(isBitSet(ADCSRA, ADSC)) //stalls the code while the ADC is initalizing/running
  e0:	80 81       	ld	r24, Z
  e2:	86 fd       	sbrc	r24, 6
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <ADCsingleRead+0x24>
	{}
	
	//the fake values were put in to avoid issues with manipulating ADCH and ADCL
	unsigned int fakeADCL = ADCL;
  e6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	unsigned int fakeADCH = ADCH;
  ea:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	returnValue = (fakeADCH << 8) + fakeADCL;
	return returnValue;
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	98 2f       	mov	r25, r24
  f2:	88 27       	eor	r24, r24
  f4:	82 0f       	add	r24, r18
  f6:	91 1d       	adc	r25, r1
  f8:	08 95       	ret

000000fa <UART_putChar>:
	UART_putChar('\n');
}

void UART_putChar(unsigned char data)
{
	while (isBitClear(UCSR0A, UDRE0)) //If UDRE0 0 bit is set to 1, the transmitter is ready to transmit again.
  fa:	e0 ec       	ldi	r30, 0xC0	; 192
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	95 ff       	sbrs	r25, 5
 102:	fd cf       	rjmp	.-6      	; 0xfe <UART_putChar+0x4>
	{}
	UDR0 = data;
 104:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 108:	08 95       	ret

0000010a <UART_putString>:
}

void UART_putString(char* stringA)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	ec 01       	movw	r28, r24
	while(*stringA != 0x00)
 110:	88 81       	ld	r24, Y
 112:	88 23       	and	r24, r24
 114:	31 f0       	breq	.+12     	; 0x122 <UART_putString+0x18>
 116:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_putChar(*stringA);
 118:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
	UDR0 = data;
}

void UART_putString(char* stringA)
{
	while(*stringA != 0x00)
 11c:	89 91       	ld	r24, Y+
 11e:	81 11       	cpse	r24, r1
 120:	fb cf       	rjmp	.-10     	; 0x118 <UART_putString+0xe>
	{
		UART_putChar(*stringA);
		stringA++;
	}
}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <UART_init>:
#include "UART.h"

void UART_init(uint16_t ubrr) //takes in baud rate number
{
	// set baudrate in UBRR
	UBRR0L = (uint8_t)(ubrr & 0xFF); //gets low bits for baudrate
 128:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UBRR0H = (uint8_t)(ubrr >> 8); //gets high bits for baudrate
 12c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>

	UCSR0C = (1 << USBS0)|(3 << UCSZ00); //Set frame format: 8data, 2stop bit
 130:	8e e0       	ldi	r24, 0x0E	; 14
 132:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>

	// enable the transmitter and receiver
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 136:	e1 ec       	ldi	r30, 0xC1	; 193
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 61       	ori	r24, 0x18	; 24
 13e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	2f e3       	ldi	r18, 0x3F	; 63
 142:	82 e4       	ldi	r24, 0x42	; 66
 144:	9f e0       	ldi	r25, 0x0F	; 15
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <UART_init+0x1e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <UART_init+0x28>
 150:	00 00       	nop
	_delay_ms(5000);
	
	UART_putString("UART Initialized");
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 85 00 	call	0x10a	; 0x10a <UART_putString>
	UART_putChar('\n');
 15a:	8a e0       	ldi	r24, 0x0A	; 10
 15c:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
	UART_putString("Copyright Sahil Kale 2020");
 160:	81 e1       	ldi	r24, 0x11	; 17
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 85 00 	call	0x10a	; 0x10a <UART_putString>
	UART_putChar('\n');
 168:	8a e0       	ldi	r24, 0x0A	; 10
 16a:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
 16e:	08 95       	ret

00000170 <UART_getChar>:
}

unsigned char UART_getChar()
{
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
 170:	e0 ec       	ldi	r30, 0xC0	; 192
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 23       	and	r24, r24
 178:	ec f7       	brge	.-6      	; 0x174 <UART_getChar+0x4>
	{
		//blinkLED();
	}
	/* Get and return received data from buffer */
	return UDR0;
 17a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 17e:	08 95       	ret

00000180 <slaveSelector>:
#include "mainInclude.h"
#include "UART.h"
#include "adc.h"

void slaveSelector(uint8_t slaveSelectNumber) //Number between 0-7
{
 180:	cf 92       	push	r12
 182:	df 92       	push	r13
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
	
	
	DDRB |= 0b00000111; //Ensure that the pins are set to output
 190:	94 b1       	in	r25, 0x04	; 4
 192:	97 60       	ori	r25, 0x07	; 7
 194:	94 b9       	out	0x04, r25	; 4
	
	//Acquire the individual bits for the slaveSelect byte
	bool firstBit = isBitSet(slaveSelectNumber, 2);
 196:	ee 24       	eor	r14, r14
 198:	e3 94       	inc	r14
 19a:	98 2f       	mov	r25, r24
 19c:	94 70       	andi	r25, 0x04	; 4
 19e:	82 ff       	sbrs	r24, 2
 1a0:	e1 2c       	mov	r14, r1
	bool secondBit = isBitSet(slaveSelectNumber, 1);
 1a2:	ff 24       	eor	r15, r15
 1a4:	f3 94       	inc	r15
 1a6:	28 2f       	mov	r18, r24
 1a8:	22 70       	andi	r18, 0x02	; 2
 1aa:	c2 2e       	mov	r12, r18
 1ac:	81 ff       	sbrs	r24, 1
 1ae:	f1 2c       	mov	r15, r1
	bool thirdBit = isBitSet(slaveSelectNumber, 0);
 1b0:	01 e0       	ldi	r16, 0x01	; 1
 1b2:	28 2f       	mov	r18, r24
 1b4:	21 70       	andi	r18, 0x01	; 1
 1b6:	d2 2e       	mov	r13, r18
 1b8:	80 ff       	sbrs	r24, 0
 1ba:	00 e0       	ldi	r16, 0x00	; 0
	
	//Acquire the current state of the bits in PORT B
	bool pinB1State = isBitSet(PORTB, PB0);
 1bc:	15 b1       	in	r17, 0x05	; 5
 1be:	11 70       	andi	r17, 0x01	; 1
	bool pinB2State = isBitSet(PORTB, PB1);
 1c0:	d5 b1       	in	r29, 0x05	; 5
 1c2:	d6 95       	lsr	r29
 1c4:	d1 70       	andi	r29, 0x01	; 1
	bool pinB3State = isBitSet(PORTB, PB2);
 1c6:	c5 b1       	in	r28, 0x05	; 5
 1c8:	c2 fb       	bst	r28, 2
 1ca:	cc 27       	eor	r28, r28
 1cc:	c0 f9       	bld	r28, 0
	
	
	//Debugging code for Dhananjay to ensure that the appropriate slave select is set
	if(firstBit) {UART_putString("1");}
 1ce:	99 23       	and	r25, r25
 1d0:	29 f0       	breq	.+10     	; 0x1dc <slaveSelector+0x5c>
 1d2:	8a e4       	ldi	r24, 0x4A	; 74
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 85 00 	call	0x10a	; 0x10a <UART_putString>
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <slaveSelector+0x64>
		else {UART_putString("0");}
 1dc:	89 e2       	ldi	r24, 0x29	; 41
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	0e 94 85 00 	call	0x10a	; 0x10a <UART_putString>
			
	if(secondBit) {UART_putString("1");}
 1e4:	cc 20       	and	r12, r12
 1e6:	29 f0       	breq	.+10     	; 0x1f2 <slaveSelector+0x72>
 1e8:	8a e4       	ldi	r24, 0x4A	; 74
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 85 00 	call	0x10a	; 0x10a <UART_putString>
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <slaveSelector+0x7a>
		else {UART_putString("0");}
 1f2:	89 e2       	ldi	r24, 0x29	; 41
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 85 00 	call	0x10a	; 0x10a <UART_putString>
	
	if(thirdBit) {UART_putString("1");}
 1fa:	dd 20       	and	r13, r13
 1fc:	29 f0       	breq	.+10     	; 0x208 <slaveSelector+0x88>
 1fe:	8a e4       	ldi	r24, 0x4A	; 74
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0e 94 85 00 	call	0x10a	; 0x10a <UART_putString>
 206:	04 c0       	rjmp	.+8      	; 0x210 <slaveSelector+0x90>
		else {UART_putString("0");}
 208:	89 e2       	ldi	r24, 0x29	; 41
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 85 00 	call	0x10a	; 0x10a <UART_putString>
	UART_putChar('\n');
 210:	8a e0       	ldi	r24, 0x0A	; 10
 212:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
	
	
	//Compare and set
	if(!(firstBit == pinB1State))
 216:	e1 16       	cp	r14, r17
 218:	21 f0       	breq	.+8      	; 0x222 <slaveSelector+0xa2>
	{
		toggleBit(PORTB, PB0);
 21a:	95 b1       	in	r25, 0x05	; 5
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	89 27       	eor	r24, r25
 220:	85 b9       	out	0x05, r24	; 5
	}
	
	if(!(secondBit == pinB2State))
 222:	fd 16       	cp	r15, r29
 224:	21 f0       	breq	.+8      	; 0x22e <slaveSelector+0xae>
	{
		toggleBit(PORTB, PB1);
 226:	95 b1       	in	r25, 0x05	; 5
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	89 27       	eor	r24, r25
 22c:	85 b9       	out	0x05, r24	; 5
	}
	
	if(!(thirdBit == pinB3State))
 22e:	0c 17       	cp	r16, r28
 230:	21 f0       	breq	.+8      	; 0x23a <slaveSelector+0xba>
	{
		toggleBit(PORTB, PB2);
 232:	95 b1       	in	r25, 0x05	; 5
 234:	84 e0       	ldi	r24, 0x04	; 4
 236:	89 27       	eor	r24, r25
 238:	85 b9       	out	0x05, r24	; 5
	}
	
	
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	ff 90       	pop	r15
 244:	ef 90       	pop	r14
 246:	df 90       	pop	r13
 248:	cf 90       	pop	r12
 24a:	08 95       	ret

0000024c <blinkLED>:


void blinkLED() //blinks the led. Ports are hardcoded.
{
	DDRB |= 0b00001000;	
 24c:	23 9a       	sbi	0x04, 3	; 4
	toggleBit(PORTB, PB3);
 24e:	95 b1       	in	r25, 0x05	; 5
 250:	88 e0       	ldi	r24, 0x08	; 8
 252:	98 27       	eor	r25, r24
 254:	95 b9       	out	0x05, r25	; 5
 256:	2f e9       	ldi	r18, 0x9F	; 159
 258:	36 e8       	ldi	r19, 0x86	; 134
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	30 40       	sbci	r19, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <blinkLED+0x10>
 264:	00 c0       	rjmp	.+0      	; 0x266 <blinkLED+0x1a>
 266:	00 00       	nop
	_delay_ms(500);
	toggleBit(PORTB, PB3);
 268:	95 b1       	in	r25, 0x05	; 5
 26a:	89 27       	eor	r24, r25
 26c:	85 b9       	out	0x05, r24	; 5
 26e:	2f e9       	ldi	r18, 0x9F	; 159
 270:	36 e8       	ldi	r19, 0x86	; 134
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	21 50       	subi	r18, 0x01	; 1
 276:	30 40       	sbci	r19, 0x00	; 0
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <blinkLED+0x28>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <blinkLED+0x32>
 27e:	00 00       	nop
 280:	08 95       	ret

00000282 <init>:
}

void init()
{
	unsigned int ubrr = baudRate;
	UART_init(ubrr);
 282:	8c e0       	ldi	r24, 0x0C	; 12
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 94 00 	call	0x128	; 0x128 <UART_init>
	blinkLED();
 28a:	0e 94 26 01 	call	0x24c	; 0x24c <blinkLED>
	toggleBit(PORTB, PB3);
 28e:	95 b1       	in	r25, 0x05	; 5
 290:	88 e0       	ldi	r24, 0x08	; 8
 292:	89 27       	eor	r24, r25
 294:	85 b9       	out	0x05, r24	; 5
 296:	08 95       	ret

00000298 <transmitADCvalues>:
	
}

void transmitADCvalues(uint8_t ADCPort, char* stringToTransmit) //does the ADC conversion, then does the conversion and sends the raw ADC value and then the stringToTransmit.
{
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
 2a4:	2b 97       	sbiw	r28, 0x0b	; 11
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	8b 01       	movw	r16, r22
	int reading = ADCsingleRead(ADCPort);
 2b2:	0e 94 5e 00 	call	0xbc	; 0xbc <ADCsingleRead>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2b6:	42 e0       	ldi	r20, 0x02	; 2
 2b8:	be 01       	movw	r22, r28
 2ba:	6f 5f       	subi	r22, 0xFF	; 255
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255
 2be:	0e 94 c0 01 	call	0x380	; 0x380 <__itoa_ncheck>
	char buffer[11]; //Buffer must be # of bits + 1
	itoa(reading, buffer, 2); //convert the bits to string
	UART_putString(buffer);
 2c2:	ce 01       	movw	r24, r28
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	0e 94 85 00 	call	0x10a	; 0x10a <UART_putString>
	UART_putString(stringToTransmit);
 2ca:	c8 01       	movw	r24, r16
 2cc:	0e 94 85 00 	call	0x10a	; 0x10a <UART_putString>
	
}
 2d0:	2b 96       	adiw	r28, 0x0b	; 11
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	08 95       	ret

000002e6 <main>:

int main(void)
{
	
	init();	
 2e6:	0e 94 41 01 	call	0x282	; 0x282 <init>
	
    /* Replace with your application code */
    while (1) 
    {
		
		char receivedChar = UART_getChar();
 2ea:	0e 94 b8 00 	call	0x170	; 0x170 <UART_getChar>
		switch(receivedChar) //massive switch case for commands
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	fc 01       	movw	r30, r24
 2f2:	f0 97       	sbiw	r30, 0x30	; 48
 2f4:	e3 31       	cpi	r30, 0x13	; 19
 2f6:	f1 05       	cpc	r31, r1
 2f8:	c8 f5       	brcc	.+114    	; 0x36c <main+0x86>
 2fa:	ec 5c       	subi	r30, 0xCC	; 204
 2fc:	ff 4f       	sbci	r31, 0xFF	; 255
 2fe:	0c 94 ba 01 	jmp	0x374	; 0x374 <__tablejump2__>
		{
			case 'B': //blink code
				UART_putString("Blinking LED");
 302:	8b e2       	ldi	r24, 0x2B	; 43
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	0e 94 85 00 	call	0x10a	; 0x10a <UART_putString>
				blinkLED();
 30a:	0e 94 26 01 	call	0x24c	; 0x24c <blinkLED>
				break;
 30e:	2e c0       	rjmp	.+92     	; 0x36c <main+0x86>
			case '0':
				slaveSelector(0);
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				transmitADCvalues(0, "Selected0");
 316:	68 e3       	ldi	r22, 0x38	; 56
 318:	71 e0       	ldi	r23, 0x01	; 1
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 4c 01 	call	0x298	; 0x298 <transmitADCvalues>
				break;
 320:	25 c0       	rjmp	.+74     	; 0x36c <main+0x86>
			case '1':
				slaveSelector(1);
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				transmitADCvalues(0, "Selected1");
 328:	62 e4       	ldi	r22, 0x42	; 66
 32a:	71 e0       	ldi	r23, 0x01	; 1
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 4c 01 	call	0x298	; 0x298 <transmitADCvalues>
				break;
 332:	1c c0       	rjmp	.+56     	; 0x36c <main+0x86>
			case '2':
				slaveSelector(2);
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				transmitADCvalues(0, "Selected2");
 33a:	6c e4       	ldi	r22, 0x4C	; 76
 33c:	71 e0       	ldi	r23, 0x01	; 1
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 4c 01 	call	0x298	; 0x298 <transmitADCvalues>
				break;
 344:	13 c0       	rjmp	.+38     	; 0x36c <main+0x86>
			case '3':
				slaveSelector(3);
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				break;
 34c:	0f c0       	rjmp	.+30     	; 0x36c <main+0x86>
			case '4':
				slaveSelector(4);
 34e:	84 e0       	ldi	r24, 0x04	; 4
 350:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				break;
 354:	0b c0       	rjmp	.+22     	; 0x36c <main+0x86>
			case '5':
				slaveSelector(5);
 356:	85 e0       	ldi	r24, 0x05	; 5
 358:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				break;
 35c:	07 c0       	rjmp	.+14     	; 0x36c <main+0x86>
			case '6':
				slaveSelector(6);
 35e:	86 e0       	ldi	r24, 0x06	; 6
 360:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				break;
 364:	03 c0       	rjmp	.+6      	; 0x36c <main+0x86>
			case '7':
				slaveSelector(7);
 366:	87 e0       	ldi	r24, 0x07	; 7
 368:	0e 94 c0 00 	call	0x180	; 0x180 <slaveSelector>
				break;
		}
		
		
		
		UART_putChar('\n');
 36c:	8a e0       	ldi	r24, 0x0A	; 10
 36e:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_putChar>
		
		
    }
 372:	bb cf       	rjmp	.-138    	; 0x2ea <main+0x4>

00000374 <__tablejump2__>:
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	05 90       	lpm	r0, Z+
 37a:	f4 91       	lpm	r31, Z
 37c:	e0 2d       	mov	r30, r0
 37e:	09 94       	ijmp

00000380 <__itoa_ncheck>:
 380:	bb 27       	eor	r27, r27
 382:	4a 30       	cpi	r20, 0x0A	; 10
 384:	31 f4       	brne	.+12     	; 0x392 <__itoa_ncheck+0x12>
 386:	99 23       	and	r25, r25
 388:	22 f4       	brpl	.+8      	; 0x392 <__itoa_ncheck+0x12>
 38a:	bd e2       	ldi	r27, 0x2D	; 45
 38c:	90 95       	com	r25
 38e:	81 95       	neg	r24
 390:	9f 4f       	sbci	r25, 0xFF	; 255
 392:	0c 94 cc 01 	jmp	0x398	; 0x398 <__utoa_common>

00000396 <__utoa_ncheck>:
 396:	bb 27       	eor	r27, r27

00000398 <__utoa_common>:
 398:	fb 01       	movw	r30, r22
 39a:	55 27       	eor	r21, r21
 39c:	aa 27       	eor	r26, r26
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	aa 1f       	adc	r26, r26
 3a4:	a4 17       	cp	r26, r20
 3a6:	10 f0       	brcs	.+4      	; 0x3ac <__utoa_common+0x14>
 3a8:	a4 1b       	sub	r26, r20
 3aa:	83 95       	inc	r24
 3ac:	50 51       	subi	r21, 0x10	; 16
 3ae:	b9 f7       	brne	.-18     	; 0x39e <__utoa_common+0x6>
 3b0:	a0 5d       	subi	r26, 0xD0	; 208
 3b2:	aa 33       	cpi	r26, 0x3A	; 58
 3b4:	08 f0       	brcs	.+2      	; 0x3b8 <__utoa_common+0x20>
 3b6:	a9 5d       	subi	r26, 0xD9	; 217
 3b8:	a1 93       	st	Z+, r26
 3ba:	00 97       	sbiw	r24, 0x00	; 0
 3bc:	79 f7       	brne	.-34     	; 0x39c <__utoa_common+0x4>
 3be:	b1 11       	cpse	r27, r1
 3c0:	b1 93       	st	Z+, r27
 3c2:	11 92       	st	Z+, r1
 3c4:	cb 01       	movw	r24, r22
 3c6:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <strrev>

000003ca <strrev>:
 3ca:	dc 01       	movw	r26, r24
 3cc:	fc 01       	movw	r30, r24
 3ce:	67 2f       	mov	r22, r23
 3d0:	71 91       	ld	r23, Z+
 3d2:	77 23       	and	r23, r23
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <strrev+0x4>
 3d6:	32 97       	sbiw	r30, 0x02	; 2
 3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <strrev+0x18>
 3da:	7c 91       	ld	r23, X
 3dc:	6d 93       	st	X+, r22
 3de:	70 83       	st	Z, r23
 3e0:	62 91       	ld	r22, -Z
 3e2:	ae 17       	cp	r26, r30
 3e4:	bf 07       	cpc	r27, r31
 3e6:	c8 f3       	brcs	.-14     	; 0x3da <strrev+0x10>
 3e8:	08 95       	ret

000003ea <_exit>:
 3ea:	f8 94       	cli

000003ec <__stop_program>:
 3ec:	ff cf       	rjmp	.-2      	; 0x3ec <__stop_program>
